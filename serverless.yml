service: template-sls

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    STAGE: ${opt:stage, self:provider.stage}
    ICONIK_TOKENS_TABLE_NAME: ${self:custom.tablesNames.IconikTokensTable.${opt:stage, self:provider.stage}}
    USERS_TABLE_NAME: ${self:custom.tablesNames.UsersTable.${opt:stage, self:provider.stage}}
    JOBS_TABLE_NAME: ${self:custom.tablesNames.JobsTable.${opt:stage, self:provider.stage}}
  region: ${file(env.yml):${opt:stage, self:provider.stage}.REGION}
  profile: ${file(env.yml):${opt:stage, self:provider.stage}.PROFILE}
  tags:
    client: ${file(env.yml):${opt:stage, self:provider.stage}.CLIENT}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudformation:DescribeStacks
      Resource:
        - arn:aws:cloudformation:*:*:stack/${file(env.yml):${opt:stage, self:provider.stage}.CLOUDFORMATION_STACK_NAME}/*
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - !GetAtt IconikTokensTable.Arn
        - !Sub
          - '${arn}/index/*'
          - arn: !GetAtt IconikTokensTable.Arn
    #        - !GetAtt UsersTable.Arn
    #        - !Sub
    #          - '${arn}/index/*'
    #          - arn: !GetAtt UsersTable.Arn
    #        - !GetAtt JobsTable.Arn
    #        - !Sub
    #          - '${arn}/index/*'
    #          - arn: !GetAtt JobsTable.Arn
    #    - Effect: Allow
    #      Action:
    #        - s3:*
    #      Resource:
    #        - arn:aws:s3:::${file(env.yml):${opt:stage, self:provider.stage}.BUCKET}
    #        - arn:aws:s3:::${file(env.yml):${opt:stage, self:provider.stage}.BUCKET}/*
    #    - Effect: Allow
    #      Action:
    #        - es:*
    #      Resource:
    #        - arn:aws:es:*:*:domain/${file(env.yml):${opt:stage, self:provider.stage}.ELASTIC_SEARCH_DOMAIN}
    #        - arn:aws:es:*:*:domain/${file(env.yml):${opt:stage, self:provider.stage}.ELASTIC_SEARCH_DOMAIN}/*
    #    - Effect: Allow
    #      Action:
    #        - ses:SendEmail
    #      Resource: '*'
    #    - Effect: Allow
    #      Action:
    #        - sqs:DeleteMessage
    #        - sqs:ReceiveMessage
    #        - sqs:SendMessage
    #      Resource: arn:aws:sqs:*:*:${file(env.yml):${opt:stage, self:provider.stage}.SQS}
    #    - Effect: Allow
    #      Action:
    #        - sns:CreatePlatformEndpoint
    #        - sns:DeleteEndpoint
    #        - sns:Publish
    #      Resource:
    #        - ${file(env.yml):${opt:stage, self:provider.stage}.SNS_ANDROID_APPLICATION_ARN}
    #        - ${file(env.yml):${opt:stage, self:provider.stage}.SNS_IOS_APPLICATION_ARN}
    - Effect: Allow
      Action:
        - events:PutRule
        - events:DescribeRule
        - events:PutTargets
      Resource: '*'
    - Effect: Allow
      Action:
        - lambda:AddPermission
      Resource: '*'
#resources:
#  Resources:
#    UserPool:
#      Type: AWS::Cognito::UserPool
#      Properties:
#        UserPoolName: ${file(env.yml):${opt:stage, self:provider.stage}.USER_POOL}
#        UsernameAttributes: [email]
#        AutoVerifiedAttributes:
#          - email
#        Schema:
#          - Name: email
#            AttributeDataType: String
#            Mutable: false
#            Required: true
#        Policies:
#          PasswordPolicy:
#            RequireLowercase: true
#            RequireSymbols: false
#            RequireNumbers: true
#            MinimumLength: 8
#            RequireUppercase: true
#        AdminCreateUserConfig:
#          UnusedAccountValidityDays: 60
#    UserPoolClient:
#      Type: AWS::Cognito::UserPoolClient
#      Properties:
#        ClientName: ${self:provider.environment.USER_POOL_CLIENT}
#        GenerateSecret: false
#        UserPoolId:
#          Ref: UserPool
#  Outputs:
#    UserPoolId:
#      Value:
#        Ref: UserPool
#      Export:
#        Name: ${opt:stage, self:provider.stage}UserPool::Id
#    UserPoolClientId:
#      Value:
#        Ref: UserPoolClient
#      Export:
#        Name: ${opt:stage, self:provider.stage}UserPoolClient::Id

package:
  include:
    - bin/*
custom:
  queuesUrls:
    SubscribeQueue:
      local: ''
      dev: !Ref SubscribeQueue
      test: !Ref SubscribeQueue
      prod: !Ref SubscribeQueue
  queuesNames:
    SubscribeQueue:
      local: 'win-local-subscribe'
      dev: 'win-dev-subscribe'
      test: 'win-test-subscribe'
      prod: 'win-prod-subscribe'
  tablesNames:
    IconikTokensTable:
      local: 'IconikTokens-local'
      dev: 'IconikTokens-dev'
      test: 'IconikTokens-test'
      prod: 'IconikTokens'
    UsersTable:
      local: 'Users-local'
      dev: 'Users-dev'
      test: 'Users-test'
      prod: 'Users'
    JobsTable:
      local: 'Jobs-local'
      dev: 'Jobs-dev'
      test: 'Jobs-test'
      prod: 'Jobs'
  apiBaseURL:
    local: '${file(env.yml):local.OFFLINE_API_BASE_URL}'
    dev: !Sub
      - 'https://${gatewayId}.execute-api.${region}.${suffix}/${opt:stage, self:provider.stage}/'
      - gatewayId: !Ref ApiGatewayRestApi
        region: !Ref AWS::Region
        suffix: !Ref AWS::URLSuffix
    test: !Sub
      - 'https://${gatewayId}.execute-api.${region}.${suffix}/${opt:stage, self:provider.stage}/'
      - gatewayId: !Ref ApiGatewayRestApi
        region: !Ref AWS::Region
        suffix: !Ref AWS::URLSuffix
    prod: !Sub
      - 'https://${gatewayId}.execute-api.${region}.${suffix}/${opt:stage, self:provider.stage}/'
      - gatewayId: !Ref ApiGatewayRestApi
        region: !Ref AWS::Region
        suffix: !Ref AWS::URLSuffix
  dirconfig:
    quiet: true
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules:
      packagePath: 'package.json'
      forceExclude:
        - aws-sdk
    packager: 'npm' # Packager that will be used to package your external modules
  #  serverless-offline-sns:
  #    port: 4002 # a free port for the sns server to run on
  #    debug: false
  #  s3:
  #    host: 0.0.0.0
  #    port: 8001
  #    directory: /tmp
  #  capacities:
  #    - table: UsersTable  # DynamoDB Resource
  #      read:
  #        minimum: 5       # Minimum read capacity
  #        maximum: 100     # Maximum read capacity
  #        usage: 0.75      # Targeted usage percentage
  #      write:
  #        minimum: 5       # Minimum write capacity
  #        maximum: 100     # Maximum write capacity
  #        usage: 0.75      # Targeted usage percentage
  #    - table: JobsTable   # DynamoDB Resource
  #      index:             # List or single index name
  #        - ProducerIdGlobalIndex
  #        - CrewIdGlobalIndex
  #      read:
  #        minimum: 4       # Minimum read capacity
  #        maximum: 200     # Maximum read capacity
  #        usage: 0.75      # Targeted usage percentage
  #      write:
  #        minimum: 2       # Minimum write capacity
  #        maximum: 200     # Maximum write capacity
  #        usage: 0.5       # Targeted usage percentage
  prune:
    automatic: true
    number: 3
  envFiles: # YAML files used to create .env file
    - env.yml
  envEncryptionKeyId: # KMS Key used for encrypting values
    local: ${file(kms_key.yml):local} # Key used for local-stage
    dev: ${file(kms_key.yml):dev} # Key used for development-stage
    test: ${file(kms_key.yml):test} # Key used for test-stage
    prod: ${file(kms_key.yml):prod} # Key used for prod-stage
  #  serverless-offline-sqs:
  #    autoCreate: true # create queue if not exists, it doesn't work for FIFO SQS
  #    apiVersion: '2012-11-05'
  #    endpoint: http://0.0.0.0:9324
  #    region: ${file(env.yml):${opt:stage, self:provider.stage}.REGION}
  #    accessKeyId: root
  #    secretAccessKey: root
  #    skipCacheInvalidation: false

plugins: # order matters!
  - '@redtea/serverless-env-generator'
  - serverless-dir-config-plugin
  - serverless-webpack
  #  - serverless-offline-sqs
  - serverless-offline
  #  - serverless-offline-sns
  #  - serverless-s3-local
  - serverless-prune-plugin
